// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Cpp_rowSums
NumericVector Cpp_rowSums(const NumericMatrix& x);
RcppExport SEXP _gamstackr_Cpp_rowSums(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Cpp_rowSums(x));
    return rcpp_result_gen;
END_RCPP
}
// vec2mat
Rcpp::NumericMatrix vec2mat(Rcpp::NumericVector vec, int n, int k);
RcppExport SEXP _gamstackr_vec2mat(SEXP vecSEXP, SEXP nSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(vec2mat(vec, n, k));
    return rcpp_result_gen;
END_RCPP
}
// rowMaxs
NumericVector rowMaxs(NumericMatrix x);
RcppExport SEXP _gamstackr_rowMaxs(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rowMaxs(x));
    return rcpp_result_gen;
END_RCPP
}
// matbyvec
NumericMatrix matbyvec(NumericMatrix x, NumericVector v);
RcppExport SEXP _gamstackr_matbyvec(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(matbyvec(x, v));
    return rcpp_result_gen;
END_RCPP
}
// mattakevec
NumericMatrix mattakevec(NumericMatrix x, NumericVector v);
RcppExport SEXP _gamstackr_mattakevec(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(mattakevec(x, v));
    return rcpp_result_gen;
END_RCPP
}
// get_derivs_cpp
List get_derivs_cpp(NumericMatrix eta, NumericVector theta, int deriv, int n_k, int dim_num, NumericMatrix x);
RcppExport SEXP _gamstackr_get_derivs_cpp(SEXP etaSEXP, SEXP thetaSEXP, SEXP derivSEXP, SEXP n_kSEXP, SEXP dim_numSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type deriv(derivSEXP);
    Rcpp::traits::input_parameter< int >::type n_k(n_kSEXP);
    Rcpp::traits::input_parameter< int >::type dim_num(dim_numSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(get_derivs_cpp(eta, theta, deriv, n_k, dim_num, x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gamstackr_Cpp_rowSums", (DL_FUNC) &_gamstackr_Cpp_rowSums, 1},
    {"_gamstackr_vec2mat", (DL_FUNC) &_gamstackr_vec2mat, 3},
    {"_gamstackr_rowMaxs", (DL_FUNC) &_gamstackr_rowMaxs, 1},
    {"_gamstackr_matbyvec", (DL_FUNC) &_gamstackr_matbyvec, 2},
    {"_gamstackr_mattakevec", (DL_FUNC) &_gamstackr_mattakevec, 2},
    {"_gamstackr_get_derivs_cpp", (DL_FUNC) &_gamstackr_get_derivs_cpp, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_gamstackr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
